//
// {{name}}Translator Tests
// Generated on {{date}} by gen v{{gen_version}}
//

{{#imports}}
import {{import_name}}
{{/imports}}

@testable import {{module_name}}

final class {{name}}TranslatorTests: QuickSpec {
    override func spec() {
        var translator: {{name}}Translator!

        beforeEach {
            translator = {{name}}Translator()
        }

        describe(".translateFromDictionary") {
        {{#has_not_nil}}
            it("should throw error for invalid DTO") {
                expect {
                    try translator.translateFrom(dictionary: TestData.emptyDTO)
                }.to(throwError())
            }
            {{/has_not_nil}}
            it("should return data model for valid DTO") {
                expect {
                    try translator.translateFrom(dictionary: TestData.validDTO)
                }.to(equal(TestData.validModel))
            }
            {{#optional_fields}}
            it("should return data model for valid DTO without {{custom_name}}") {
                expect {
                    try translator.translateFrom(dictionary: TestData.validDTOWithout{{custom_name_up}})
                }.to(equal(TestData.validModelWithout{{custom_name_up}}))
            }
            {{/optional_fields}}
        }

        describe(".translateToDictionary") {
            it("should return valid DTO") {
                // when
                let dictionary = translator.translateToDictionary(TestData.validModel)
                // then
                expect {
                    try translator.translateFrom(dictionary: dictionary)
                }.to(equal(TestData.validModel))
            }
        }
    }
}

extension {{name}}TranslatorTests {
    enum TestData {
        static let keys = {{name}}Translator.DTOKeys.self
        static let emptyDTO: [String: Any] = [:]
        {{#valid_model}}
        static let validModel = {{name}}
        {{/valid_model}}
        {{#create_valid_model}}
        static let validModel = {{name}}(
            {{#fields}}
            {{custom_name}}: <#{{type}}#>{{#comma}},{{/comma}}
            {{/fields}}
        )
        {{/create_valid_model}}
        static let validDTO: [String: Any] = [
            {{#normal_fields}}
            keys.{{key}}.rawValue: validModel.{{custom_name}}{{#optional}} as Any{{/optional}},
            {{/normal_fields}}
            {{#enum_fields}}
            keys.{{key}}.rawValue: validModel.{{custom_name}}{{#optional}}?{{/optional}}.rawValue{{#optional}} as Any{{/optional}},
            {{/enum_fields}}
            {{#custom_fields}}
            keys.{{key}}.rawValue: {{translator_class}}().translateToDictionary({{#optional}}from: {{/optional}}validModel.{{custom_name}}),
            {{/custom_fields}}
            {{#array_custom_fields}}
            keys.{{key}}.rawValue: {{translator_class}}().translateToArray(validModel.{{custom_name}}){{#optional}} as Any{{/optional}},
            {{/array_custom_fields}}
            {{#url_fields}}
            keys.{{key}}.rawValue: validModel.{{custom_name}}{{#optional}}?{{/optional}}.absoluteString{{#optional}} as Any{{/optional}},
            {{/url_fields}}
            {{#decimal_fields}}
            keys.{{key}}.rawValue: (validModel.{{custom_name}} as NSDecimalNumber{{#optional}}?{{/optional}}){{#optional}}?{{/optional}}.doubleValue{{#optional}} as Any{{/optional}},
            {{/decimal_fields}}
        ]
        {{#optional_fields}}
        static let validModelWithout{{custom_name_up}} = {{name}}(
            {{#nullable_fields}}
            {{custom_name}}: {{#normal}}validModel.{{custom_name}}{{/normal}}{{#nullable}}nil{{/nullable}}{{#comma}},{{/comma}}
            {{/nullable_fields}}
        )
        static let validDTOWithout{{custom_name_up}}: [String: Any] = [
            {{#normal_fields}}
            keys.{{key}}.rawValue: validModel.{{custom_name}}{{#optional}} as Any{{/optional}},
            {{/normal_fields}}
            {{#enum_fields}}
            keys.{{key}}.rawValue: validModel.{{custom_name}}{{#optional}}?{{/optional}}.rawValue{{#optional}} as Any{{/optional}},
            {{/enum_fields}}
            {{#custom_fields}}
            keys.{{key}}.rawValue: {{translator_class}}().translateToDictionary({{#optional}}from: {{/optional}}validModel.{{custom_name}}),
            {{/custom_fields}}
            {{#array_custom_fields}}
            keys.{{key}}.rawValue: {{translator_class}}().translateToArray(validModel.{{custom_name}}){{#optional}} as Any{{/optional}},
            {{/array_custom_fields}}
            {{#url_fields}}
            keys.{{key}}.rawValue: validModel.{{custom_name}}{{#optional}}?{{/optional}}.absoluteString{{#optional}} as Any{{/optional}},
            {{/url_fields}}
            {{#decimal_fields}}
            keys.{{key}}.rawValue: (validModel.{{custom_name}} as NSDecimalNumber{{#optional}}?{{/optional}}){{#optional}}?{{/optional}}.doubleValue{{#optional}} as Any{{/optional}},
            {{/decimal_fields}}
        ]
        {{/optional_fields}}
    }
}
